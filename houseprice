"""In this project, you are going to design a housing price prediction model.

You are given a training dataset called housing_train.csv

For each house in this dataset, you have the following information:

houseID - this is just an identifier. It's used to identify a given house, as such please discard it for your model
price - the price of the house
area - the area of the house
bedrooms - no. of bedrooms in the house
bathrooms - no of bathrooms in the house
stories - no of floors in the house
mainroad - whether the house is on the mainroad or not
guestroom - whether the house has a guestroom or not
basement - whether the house has a basement or not
hotwaterheating - whether the house has heating for water or not
airconditioning - whether the house has air conditioning or not
parking - no. of parking in the housing
prefarea - is this area a preferred area in the neighbourhood?
furnishingstatus - the furnishing status of the house
Your task
You must predict the housing prices for the houses mentioned in house_test.csv and produce a new file predictions.csv

The predictions.csv file should only have 2 columns: house_id and predicted. Here the predicted column contains the predicted prices of the mentioned house_id
The predictions.csv file must be generated by you. And it must have only the 2 mentioned columns

Input/Output
Input: housing_train.csv and housing_test.csv already exist. You can simply read them in your solution
Output: Generate a file called predictions.csv with the required format and data"""
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.feature_selection import RFE
from sklearn.linear_model import LinearRegression
import statsmodels.api as sm  


def binary_map(x):
    return x.map({'yes': 1, "no": 0})

def prepare_dataset(filename):
    housing = pd.read_csv(filename)
    varlist =  ['mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'prefarea']
    
    housing[varlist] = housing[varlist].apply(binary_map)
    
    # Let's drop the first column from status df using 'drop_first = True'
    status = pd.get_dummies(housing['furnishingstatus'], drop_first = True)

    # Add the results to the original housing dataframe
    housing = pd.concat([housing, status], axis = 1)
    
    housing.drop(['furnishingstatus'], axis = 1, inplace = True)
    
    scaler = MinMaxScaler()
    num_vars = ['area', 'bedrooms', 'bathrooms', 'stories', 'parking']
    housing[num_vars] = scaler.fit_transform(housing[num_vars])

    
    return housing


def learn(filename):
    df_train = prepare_dataset(filename)
    
    y_train = df_train.pop('price')
    names = df_train.pop('houseID')
    X_train = df_train
    
    lm = LinearRegression()
    lm.fit(X_train, y_train)

    rfe = RFE(lm, n_features_to_select=10)             # running RFE
    rfe = rfe.fit(X_train, y_train)
    
    col = X_train.columns[rfe.support_]
    X_train_rfe = X_train[col]
    
    
    X_train_rfe = sm.add_constant(X_train_rfe)
    
    lm = sm.OLS(y_train,X_train_rfe).fit()
    X_train_rfe = X_train_rfe.drop(['const'], axis=1)    
    
    return lm, X_train_rfe.columns


def predict(model, filename, columns):
    dataset = prepare_dataset(filename)
    X_test_new = dataset[columns]
    X_test_new = sm.add_constant(X_test_new)
    preds = model.predict(X_test_new)
    
    with_predictions = dataset.merge(preds.to_frame(), left_index=True, right_index=True)
    with_predictions = with_predictions.rename(columns={0:'predicted'})
    
    return with_predictions

model, columns = learn('housing_train.csv')
predictions = predict(model, 'housing_test.csv', columns)

predictions = predictions[['houseID', 'predicted']]
predictions.to_csv('predictions.csv', index=False)